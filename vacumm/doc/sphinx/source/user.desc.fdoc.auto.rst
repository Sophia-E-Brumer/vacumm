Auto-documenting fortran codes
==============================

Sphinx extension :mod:`~vacumm.sphinxext.fortran_autodoc`
provides directives for semi-automatically documenting (F90+) fortran codes.
It helps describing et referencing programs, modules,
derived types, functions, subroutines and variables in 
documentatin generated by sphinx.

.. note::
    
    You need modules :mod:`numpy` et :mod:`vacumm.sphinxext.fortran_domain`
    tu use this extension.
    
.. highlight:: rst

How it works
------------

The process of auto-documentation is the following:
    
    #. The first step consists in **analyzing the code** included
       in a list of fortran files.
       
       a) The module :mod:`numpy.f2py.crackfortran` first indexes
          all fortran entities (modules, functions, calling
          arguments, etc).
       b) Then all comments associated to identified entities
          are extracted to get complementary information.
          
    #. The second step **auto-documments on demand** an entity
       indexed during the first step, using the
       sphinx extension :mod:`~vacumm.sphinxext.fortran_domain`.
    
    


Usage
-----

Configure Sphinx
~~~~~~~~~~~~~~~~

You can configure sphinx by editing the file :file:`conf.py` 
(see :sphinx:`documentation <config.html#build-config>`).

You must first **load the extension**:
    
- :mod:`vacumm.sphinxext.fortran_domain`: manual documentation of fortran code.
- :mod:`vacumm.sphinxext.fortran_autodoc`: auto-documentation.

Just add the name of the two modules to the list of the configuration variable
:sphinx:`extension <config.html#confval-extensions>`.

Then, you must specify the **list of fortran source files** in the 
configuration variable :confval:`fortran_src`.

Here are the available configuration variables.

.. confval:: fortran_src

    This variable must be set with file pattern, like ``"*.f90``,
    or a list of them.
    It is also possible to specify a directory name; in this case,
    all files than have an extension matching those define by 
    the config variable :confval:`fortran_ext` are used.
    
    .. note::
        
        All paths are relative to the sphinx configuration directory
        (where the :file:`conf.py` is).
    
.. confval:: fortran_ext

    Liste des extensions possibles dans le cas d'un listing de répertoire
    (par défaut : ``['f90', 'f95']``).
    
.. confval:: fortran_encoding

    Encodage des caractères des fichiers fortran (par défaut : ``"utf8"``).
    
    .. note:: Il est fortement suggéré d'encoder vos sources avec un jeu de
        caractère universel tel que l'UTF-8.

.. confval::   fortran_subsection_type

     Type de section pour la documentation des modules et fichiers.
     Au choix :
         
         - ``"rubric"`` (par défaut) : utilise la directive 
           :rst:dir:`rubric` (title léger en gras).
         - ``"title"`` : utilise un titre conventionnel (texte avec soulignage,
           dont le caractère est défini par :confval:`fortran_title_underline`).
           
.. confval:: fortran_title_underline

    Carcatère utilisé pour le soulignage (par défaut ``"-"``) si 
    ``fortran_subsection_type = "title"``.
           
           
.. confval:: fortran_indent

    Caractère d'indentation (par défaut ``4``).
    S'il s'agit d'un entier, indique le nombre d'espaces.

Insérer une auto-documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

L'insertion d'une auto-documentation se fait au choix grâce
à l'une des directives suivantes.

.. rst:directive:: .. f:autoprogram:: progname

    Documenter un programme.
    
.. rst:directive:: .. f:autofunction:: [modname/]funcname

    Documenter une fonction.

.. rst:directive:: .. f:autosubroutine:: [modname/]subrname

    Documenter une subroutine.
    
.. rst:directive:: .. f:autotype::  [modname/]typename

    Documenter un type dérivé.
    
.. rst:directive:: .. f:autovariable::  [modname/]varname

    Documenter une variable d'un module.

.. rst:directive:: .. f:autovariable::  modname

    Documenter un module.
    Cette directive accèpte les options ``:subsection_type:`` and 
    ``:title_underline:``.
    
.. rst:directive:: .. f:autosrcfile::  pathname

    Documenter les programmes, fonctions et subroutines d'un fichier source.
    Cette directive accèpte les options :``:search_mode:`` and  ``:objtype:``
    (voir :meth:`~vacumm.sphinxext.fortran_autodoc.F90toRst.filter_by_srcfile`).
    Exemple : ::
        
        .. f:autosrcfile::  myfile.f90
            :search_mode: basename
            :objtype: function subroutine
            
    .. warning:: Directive non testée !
            
    
Optimiser le processus
----------------------

Pour optimiser le processus de documentation,
il est recommandé de suivre quelques règles relatives aux
commentaires intégrés au code fortran.
Ces commentaires permettent de mieux détaillé la
description des entités fortran ; 
ils sont interprétés en langage rst.

Commentaires d'entête
~~~~~~~~~~~~~~~~~~~~~
.. highlight:: fortran

Les commentaires en entête des **modules** (jusqu'à la première ligne de code),
sont systématiquement utilisés. Exemple : ::
    
    module mymod
    
    ! This is my **super** module and its description
    
    integer :: var
    
    end module mymod


Dans le cas des **programmes**, **fonctions**, **subroutines** et **types**, les commentaires sont utilisés
s'ils commencent immédiatement après la ligne de déclaration.
Exemples : ::
    
    subroutine mysub(a)
    ! Description
    end subroutine mysub
    
    type mytype
        ! Description
        integer :: var
    end type mytype


Commentaires en ligne
~~~~~~~~~~~~~~~~~~~~~

Ces commentaires se situent au niveau d'une ligne de code.
Ils servent à déclarer les **champs de types dérivés**, les **variables d'un module**
et les **arguments** des fonctions et subroutines. Exemple ::
    
    type mytype
        integer :: myvar &, ! Description1
            &      myvar2   ! Description2
    end type mytype
    
    subroutine mysub(a, b)
        ! Description mysub
         integer, intent(in) :: a ! Description a
         real, intent(out) :: b   ! Description b
    end subroutine mysub

.. warning::
    
    Il est impératif qu'il n'y ait qu'une seule déclaration de variable
    si un commentaire de description est indiqué.